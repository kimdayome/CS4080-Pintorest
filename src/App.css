/* App.css */

.App {
    display: flex; /* makes elements in a flexbox layout..*/
}

main {
    flex-grow: 1; /* allows main content to grow and take remaining space, hey! main, please expend
    and take up the remaining available space in the flexbox layout. I want content fills the page*/

    margin-left: 291px; /* no overalp with the fixed sidebar, hey! the side bar is approximately 291px,
    so please push the main content right by 291, because I don't want this to be overlapped. */
}

/* 

1. display: flex; in this case, makes the .App container a flexbox container, which changes how its
childerent ex: sidebar, <main> elements... are positioned and sized relatively to each other

2. flexbox (flex) places its childeren rotizontally side by side in a row. side - main (contatining 
the Topmain) will sit to each other

3. with the flex, you can control how the items grow or shrink based on available space.

Note : the reason for using the 'display: flex; here is to create a two column where the sidebar and main 
contents are positioned side-by-side. so handeled together in one shot

Note 2 : Alternatively, if you dont want to have the 'main' part here (which applies globablly to the app.js,
add another div class in Topmain.js and apply styles to Topmain.css file

*/